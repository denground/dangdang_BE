const httpMocks = require('node-mocks-http');
const userController = require('../../controller/user');
const User = require('../../schemas/user');
const locals = require('../data/locals.json');
const signup1 = require('../data/signup1.json');
const signup2 = require('../data/signup2.json');
const signup3 = require('../data/signup3.json');
const signup4 = require('../data/signup4.json');
const signup5 = require('../data/signup5.json');
const signup6 = require('../data/signup6.json');
const signup7 = require('../data/signup7.json');
const signup8 = require('../data/signup8.json');
const signup9 = require('../data/signup9.json');
const wrongPW = require('../data/wrongPW.json');
const isUser = require('../data/isUser.json');
const isPW = require('../data/isPW.json');
const nicknameUpdateOne = require('../data/nicknameUpdateOne.json');
const PWUpdateOne = require('../data/PWupdateOne.json');
const wrongPWUpdateOne = require('../data/wrongPWUpdateOne.json');
const wrongPWUpdateOne2 = require('../data/wrongPWUpdateOne2.json');
const user = require('../../schemas/user');

User.findOne = jest.fn();
User.create = jest.fn();
User.updateOne = jest.fn();

beforeEach(() => {
    req = httpMocks.createRequest();
    res = httpMocks.createResponse();
    next = null;
    res.locals.user = locals;
});

describe('ÌöåÏõêÍ∞ÄÏûÖ', () => {
    test('ÌöåÏõêÍ∞ÄÏûÖ Í∞ÄÎä•Ìï† Îïå', async () => {
        req.body = signup4;
        User.create.mockResolvedValue(signup5);
        await userController.userSignup(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            success: 'ÌöåÏõêÍ∞ÄÏûÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§üê∂',
        });
    });
    test('PWÏôÄ confirmPW Îã§Î•∏ Í≤ΩÏö∞ ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = signup1;
        await userController.userSignup(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Îã§Î•¥Í≤å ÏûÖÎ†•ÎêêÏäµÎãàÎã§.',
        });
    });
    test('Ïù¥ÎØ∏ Í∞ÄÏûÖÎêòÏñ¥ ÏûàÎäî ÏïÑÏù¥ÎîîÏù∏ Í≤ΩÏö∞ ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = signup2;
        User.findOne.mockResolvedValue(signup2);
        await userController.userSignup(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'Ïù¥ÎØ∏ Í∞ÄÏûÖÌïú ÏïÑÏù¥Îîî ÎòêÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§.',
        });
    });

    test('Ïù¥ÎØ∏ Í∞ÄÏûÖÎêòÏñ¥ ÏûàÎäî Ïù¥Î©îÏùºÏù∏ Í≤ΩÏö∞ ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = signup3;
        User.findOne.mockResolvedValue(signup3);
        await userController.userSignup(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'Ïù¥ÎØ∏ Í∞ÄÏûÖÌïú ÏïÑÏù¥Îîî ÎòêÎäî Ïù¥Î©îÏùºÏûÖÎãàÎã§.',
        });
    });

    test('Ïù¥Î©îÏùº Ïù∏ÌíãÍ∞íÏù¥ ÌòïÏãùÏóê ÎßûÏßÄ ÏïäÏùÑ Îïå ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = signup6;
        await userController.userSignup(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'Ïù¥Î©îÏùº ÌòïÏãùÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
        });
    });
    test('ÎπÑÎ∞ÄÎ≤àÌò∏ Ïù∏ÌíãÍ∞íÏù¥ ÌòïÏãùÏóê ÎßûÏßÄ ÏïäÏùÑ Îïå ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = signup7;
        await userController.userSignup(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'ÎπÑÎ∞ÄÎ≤àÌò∏Îäî ÏµúÏÜå 8Ïûê Ïù¥ÏÉÅ, 16Ïûê Ïù¥ÌïòÏùò ÏòÅÏñ¥ ÎåÄÏÜåÎ¨∏Ïûê Î∞è Ïà´Ïûê, ÌäπÏàòÎ¨∏Ïûê(!@#$%^*_-)Î•º Ìè¨Ìï®Ìï¥Ïïº Ìï©ÎãàÎã§.',
        });
    });
    test('ÏïÑÏù¥Îîî Ïù∏ÌíãÍ∞íÏù¥ ÌòïÏãùÏóê ÎßûÏßÄ ÏïäÏùÑ Îïå ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = signup8;
        await userController.userSignup(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'ÏïÑÏù¥ÎîîÎäî 2Ïûê Ïù¥ÏÉÅ, 10Ïûê Ïù¥ÌïòÏùò ÏòÅÏñ¥ ÎåÄÏÜåÎ¨∏ÏûêÏûÖÎãàÎã§.',
        });
    });
    test('ÎãâÎÑ§ÏûÑ Ïù∏ÌíãÍ∞íÏù¥ ÌòïÏãùÏóê ÎßûÏßÄ ÏïäÏùÑ Îïå ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = signup9;
        await userController.userSignup(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'ÎãâÎÑ§ÏûÑÏùÄ 2Ïûê Ïù¥ÏÉÅ, 10Ïûê Ïù¥ÌïòÏùò ÏòÅÏñ¥ ÎåÄÏÜåÎ¨∏ÏûêÎÇò ÌïúÍ∏ÄÏûÖÎãàÎã§.',
        });
    });
});
describe('Î°úÍ∑∏Ïù∏', () => {
    test('ÏïÑÏù¥Îîî Ï°∞Ìöå Ïã§Ìå® Ïãú ÏóêÎü¨ Î∞úÏÉù!', async () => {
        User.findOne.mockResolvedValue(null);
        await userController.login(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'ÌöåÏõêÏ†ïÎ≥¥Í∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Í∞ÄÏûÖ ÌõÑ Î°úÍ∑∏Ïù∏ÌïòÏÑ∏Ïöî.',
        });
    });
    test('ÎπÑÎ∞ÄÎ≤àÌò∏ ÌãÄÎ¶∞ Í≤ΩÏö∞ ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = wrongPW;
        User.findOne.mockResolvedValue(isUser);
        await userController.login(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Îã§Ïãú ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.',
        });
    });
    test('Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ!', async () => {
        req.body = isPW;
        User.findOne.mockResolvedValue(isUser);
        await userController.login(req, res, next);
        expect(res.statusCode).toBe(200);
        expect(res._isEndCalled()).toBeTruthy();
        // Îß§Î≤à ÌÜ†ÌÅ∞ Í∞íÏù¥ Îã¨ÎùºÏ†∏ JSONDataÎ°ú Í≤∞Í≥ºÍ∞í ÌôïÏù∏ Ïñ¥Î†§ÏõÄ
    });
});
test('ÎãâÎÑ§ÏûÑ Î≥ÄÍ≤Ω', async () => {
    req.body = { nickname: 'Í∏∞ÌÉÅ' };
    user.updateOne.mockResolvedValue(nicknameUpdateOne);
    await userController.modifyNicname(req, res, next);
    expect(res._getJSONData()).toStrictEqual({
        success: 'Ï†ïÎ≥¥Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.',
    });
});
describe('ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω', () => {
    test('Í∏∞Ï°¥ ÎπÑÎ∞ÄÎ≤àÌò∏ Ïù∏ÌíãÍ∞í ÌãÄÎ¶¥ Îïå ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = wrongPWUpdateOne;
        await userController.modifyPassword(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'Í∏∞Ï°¥ ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÏûòÎ™ª ÏûÖÎ†•ÎêòÏóàÏäµÎãàÎã§.',
        });
    });
    test('Î≥ÄÍ≤ΩÌï† ÎπÑÎ∞ÄÎ≤àÌò∏ Ïù∏ÌíãÍ∞íÍ≥º ÌôïÏù∏ Ïù∏ÌíãÍ∞íÏù¥ Îã§Î•º Îïå ÏóêÎü¨ Î∞úÏÉù!', async () => {
        req.body = wrongPWUpdateOne2;
        await userController.modifyPassword(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            fail: 'ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä Îã§Î•¥Í≤å ÏûÖÎ†•ÎêêÏäµÎãàÎã§.',
        });
    });
    test('ÎπÑÎ∞ÄÎ≤àÌò∏ Î≥ÄÍ≤Ω ÏÑ±Í≥µ!', async () => {
        req.body = PWUpdateOne;
        user.updateOne.mockResolvedValue({
            encryptedNewpassword:
                'U2FsdGVkX18bGKO7oKlqvuo0mfxSc4VInFasRqraNg5=',
        });
        await userController.modifyPassword(req, res, next);
        expect(res._getJSONData()).toStrictEqual({
            success: 'Ï†ïÎ≥¥Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§.',
        });
    });
});

test('ÌöåÏõêÏ†ïÎ≥¥ Ïù∏Ï¶ù ÏöîÏ≤≠ Ïãú ID, nickname, emailÏùÑ ÏùëÎãµÍ∞íÏúºÎ°ú ÎÇ¥Î≥¥ÎÇ∏Îã§!', async () => {
    await userController.auth(req, res, next);
    expect(res._getJSONData()).toStrictEqual({
        userID: 'gitak',
        nickname: 'Í∏∞ÌÉÅ',
        email: 'stom1028@naver.com',
    });
});
